{"version":3,"sources":["../src/cache.service.ts"],"names":[],"mappings":"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","file":"cache.service.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\nimport { Request, Response, ResponseOptions } from '@angular/http';\nimport 'rxjs/add/observable/fromPromise';\nimport 'rxjs/add/observable/fromEvent';\nimport 'rxjs/add/observable/merge';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/share';\nimport 'rxjs/add/operator/catch';\nimport { Storage } from '@ionic/storage';\nimport { Network } from '@ionic-native/network';\n\nexport const MESSAGES = {\n  0: 'Cache initialization error: ',\n  1: 'Cache is not enabled.',\n  2: 'Cache entry already expired: ',\n  3: 'No such key: ',\n  4: 'No entries were deleted, because browser is offline.'\n};\n\n\nexport class CacheService {\n\n  private ttl: number | string = 60 * 60; // one hour\n  private cacheEnabled: boolean = true;\n  private invalidateOffline: boolean = false;\n  private networkStatusChanges: Observable<boolean>;\n  private networkStatus: boolean = true;\n\n  constructor(\n    private _storage: Storage,\n    private network: Network\n  ) {\n    try {\n      this.watchNetworkInit();\n      _storage.ready()\n        .then(() => {\n          this.cacheEnabled = true;\n        });\n    } catch (e) {\n      this.cacheEnabled = false;\n      console.error(MESSAGES[0], e);\n    }\n  }\n\n  ready(): Promise<any> {\n    return this._storage.ready().then(() => Promise.resolve());\n  }\n\n  /**\n   * @description Disable or enable cache\n   */\n  enableCache(enable: boolean = true) {\n    this.cacheEnabled = enable;\n  }\n\n  /**\n   * @description Delete DB table and create new one\n   * @return {Promise<any>}\n   */\n  private resetDatabase(): Promise<any> {\n    return this.ready()\n      .then(() => this._storage.clear());\n  }\n\n  /**\n   * @description Set default TTL\n   * @param {number} ttl - TTL in seconds\n   */\n  setDefaultTTL(ttl: number | string): any {\n    return this.setTTL(ttl);\n  }\n\n\n  /**\n   * @description Set TTL value\n   * @param {number} ttl - TTL in seconds\n   */\n  setTTL(ttl: number | string): any {\n    return (typeof ttl === 'string' && ttl === 'none') ? this.ttl = 'none' : this.ttl = ttl;\n  }\n\n  /**\n   * @description Set if expired cache should be invalidated if device is offline\n   * @param {boolean} offlineInvalidate\n   */\n  setOfflineInvalidate(offlineInvalidate: boolean) {\n    this.invalidateOffline = !offlineInvalidate;\n  }\n\n  /**\n   * @description Start watching if devices is online or offline\n   */\n  private watchNetworkInit() {\n    this.networkStatus = navigator.onLine;\n    const connect = this.network.onConnect().map(() => true), disconnect = this.network.onDisconnect().map(() => false);\n    this.networkStatusChanges = Observable.merge(connect, disconnect).share();\n    this.networkStatusChanges.subscribe(status => {\n      this.networkStatus = status;\n    });\n  }\n\n  /**\n   * @description Stream of network status changes\n   * * @return {Observable<boolean>} network status stream\n   */\n  getNetworkStatusChanges() {\n    return this.networkStatusChanges;\n  }\n\n  /**\n   * @description Check if devices is online\n   * @return {boolean} network status\n   */\n  isOnline() {\n    return this.networkStatus;\n  }\n\n  /**\n   * @description Save item to cache\n   * @param {string} key - Unique key\n   * @param {any} data - Data to store\n   * @param {string} [groupKey] - group key\n   * @param {number} [ttl] - TTL in seconds\n   * @return {Promise<any>} - saved data\n   */\n  saveItem(key: string, data: any, groupKey: string = 'none', ttl: number | string = this.ttl): Promise<any> {\n    if (!this.cacheEnabled) {\n      return Promise.reject(MESSAGES[1]);\n    }\n\n    const expires = (typeof ttl === 'string') ? ttl  : new Date().getTime() + (ttl * 1000),\n      type = CacheService.isRequest(data) ? 'request' : typeof data,\n      value = JSON.stringify(data);\n\n    return this._storage.set(key, {\n      value,\n      expires,\n      type,\n      groupKey\n    });\n  }\n\n  /**\n   * @description Delete item from cache\n   * @param {string} key - Unique key\n   * @return {Promise<any>} - query execution promise\n   */\n  removeItem(key: string): Promise<any> {\n    if (!this.cacheEnabled) {\n      return Promise.reject(MESSAGES[1]);\n    }\n\n    return this._storage.remove(key);\n  }\n\n  /**\n   * @description Get item from cache without expire check etc.\n   * @param {string} key - Unique key\n   * @return {Promise<any>} - data from cache\n   */\n  getRawItem(key: string): Promise<any> {\n    if (!this.cacheEnabled) {\n      return Promise.reject(MESSAGES[1]);\n    }\n\n    return this._storage.get(key)\n      .then(data => {\n        if (!data) return Promise.reject('');\n        return data;\n      })\n      .catch(() => Promise.reject(MESSAGES[3] + key));\n  }\n\n  /**\n   * @description Get item from cache with expire check and correct type assign\n   * @param {string} key - Unique key\n   * @return {Promise<any>} - data from cache\n   */\n  getItem(key: string): Promise<any> {\n\n    if (!this.cacheEnabled) {\n      return Promise.reject(MESSAGES[1]);\n    }\n\n    return this.getRawItem(key).then(data => {\n\n      if (data.expires === 'none' || data.expires < new Date().getTime()) {\n        if (this.invalidateOffline) {\n          return Promise.reject(MESSAGES[2] + key);\n        } else if (this.isOnline()) {\n          return Promise.reject(MESSAGES[2] + key);\n        }\n      }\n\n      return CacheService.decodeRawData(data);\n    });\n  }\n\n  /**\n   * @description Decode raw data from DB\n   * @param {any} data - Data\n   * @return {any} - decoded data\n   */\n  static decodeRawData(data: any): any {\n    let dataJson = JSON.parse(data.value);\n    if (CacheService.isRequest(dataJson)) {\n      const requestOptions = new ResponseOptions({\n        body: dataJson._body,\n        status: dataJson.status,\n        headers: dataJson.headers,\n        statusText: dataJson.statusText,\n        type: dataJson.type,\n        url: dataJson.url\n      });\n      return new Response(requestOptions);\n    } else {\n      return dataJson;\n    }\n  }\n\n  /**\n   * @description Load item from cache if it's in cache or load from origin observable\n   * @param {string} key - Unique key\n   * @param {any} observable - Observable with data\n   * @param {string} [groupKey] - group key\n   * @param {number} [ttl] - TTL in seconds\n   * @return {Observable<any>} - data from cache or origin observable\n   */\n  loadFromObservable(key: string, observable: any, groupKey?: string, ttl?: number | string): Observable<any> {\n    if (!this.cacheEnabled) return observable;\n    observable = observable.share();\n    return Observable.fromPromise(this.getItem(key))\n      .catch((e) => {\n        observable.subscribe(res => this.saveItem(key, res, groupKey, ttl));\n        return observable;\n      });\n  }\n\n  /**\n   * @description Load item from cache if it's in cache or load from origin observable\n   * @param {string} key - Unique key\n   * @param {any} observable - Observable with data\n   * @param {string} [delayType='expired']\n   * @param {number} [ttl] - TTL in seconds\n   * @return {Observable<any>} - data from cache or origin observable\n   */\n  simpleLoadFromDelayedObservable(key: string, observable: any, delayType: string = 'all', ttl: number | string = this.ttl): Observable<any> {\n    if (!this.cacheEnabled) return observable;\n\n    const observableSubject = new Subject();\n    observable = observable.share();\n\n    const subscribeOrigin = () => {\n      observable.subscribe(res => {\n          this.saveItem(key, res, 'none', ttl);\n          observableSubject.next(res);\n          observableSubject.complete();\n        },\n        (err) => {\n          observableSubject.error(err);\n        },\n        () => {\n          observableSubject.complete();\n        });\n    };\n\n    this.getItem(key)\n      .then((data) => {\n        observableSubject.next(data);\n        if (delayType === 'all') {\n          subscribeOrigin();\n        }\n      })\n      .catch((e) => {\n        this.getRawItem(key)\n          .then(res => {\n            observableSubject.next(CacheService.decodeRawData(res));\n            subscribeOrigin();\n          })\n          .catch(() => subscribeOrigin());\n      });\n\n    return observableSubject.asObservable();\n  }\n\n  /**\n   * @description Load item from cache if it's in cache or load from origin observable\n   * @param {string} key - Unique key\n   * @param {any} observable - Observable with data\n   * @param {string} [groupKey] - group key\n   * @param {number} [ttl] - TTL in seconds\n   * @param {string} [delayType='expired']\n   * @return {Observable<any>} - data from cache or origin observable\n   */\n  loadFromDelayedObservable(key: string, observable: any, groupKey?: string, ttl: number | string = this.ttl, delayType: string = 'expired'): Observable<any> {\n    if (!this.cacheEnabled) return observable;\n\n    const observableSubject = new Subject();\n    observable = observable.share();\n\n    const subscribeOrigin = () => {\n      observable.subscribe(res => {\n          this.saveItem(key, res, groupKey, ttl);\n          observableSubject.next(res);\n          observableSubject.complete();\n        },\n        (err) => {\n          observableSubject.error(err);\n        },\n        () => {\n          observableSubject.complete();\n        });\n    };\n\n    this.getItem(key)\n      .then((data) => {\n        observableSubject.next(data);\n        if (delayType === 'all') {\n          subscribeOrigin();\n        }\n      })\n      .catch((e) => {\n        this.getRawItem(key)\n          .then(res => {\n            observableSubject.next(CacheService.decodeRawData(res));\n            subscribeOrigin();\n          })\n          .catch(() => subscribeOrigin());\n      });\n\n    return observableSubject.asObservable();\n  }\n\n  /**\n   * Perform complete cache clear\n   * @return {Promise<any>}\n   */\n  clearAll(): Promise<any> {\n    if (!this.cacheEnabled) {\n      return Promise.reject(MESSAGES[2]);\n    }\n\n    return this.resetDatabase();\n  }\n\n  /**\n   * @description Remove all expired items from cache\n   * @param {boolean} ignoreOnlineStatus -\n   * @return {Promise<any>} - query promise\n   */\n  clearExpired(ignoreOnlineStatus = false): Promise<any> {\n    if (!this.cacheEnabled) {\n      return Promise.reject(MESSAGES[2]);\n    }\n\n    if (!this.isOnline() && !ignoreOnlineStatus) {\n      return Promise.reject(MESSAGES[4]);\n    }\n\n    let datetime = new Date().getTime();\n    let promises: Promise<any>[] = [];\n    this._storage.forEach((key: string, val: any) => {\n      if (val.expires === 'none' || val.expires < datetime) promises.push(this.removeItem(key));\n    });\n\n    return Promise.all(promises);\n  }\n\n  /**\n   * @description Remove all item with specified group\n   * @param {string} groupKey - group key\n   * @return {Promise<any>} - query promise\n   */\n  clearGroup(groupKey: string): Promise<any> {\n    if (!this.cacheEnabled) {\n      return Promise.reject(MESSAGES[2]);\n    }\n    let promises: Promise<any>[] = [];\n    this._storage.forEach((key: string, val: any) => {\n      if (val.groupKey === groupKey) promises.push(this.removeItem(key));\n    });\n    return Promise.all(promises);\n  }\n\n  /**\n   * @description Check if it's an request\n   * @param {any} data - Variable to test\n   * @return {boolean} - data from cache\n   */\n  static isRequest(data: any): boolean {\n    return (\n      data && (\n        data instanceof Request ||\n        (\n          typeof data === 'object' && data.hasOwnProperty('_body') && data.hasOwnProperty('status') &&\n          data.hasOwnProperty('statusText') &&\n          data.hasOwnProperty('type') &&\n          data.hasOwnProperty('headers') &&\n          data.hasOwnProperty('url')\n        )\n      )\n    );\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Storage, },\n{type: Network, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}